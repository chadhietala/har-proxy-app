{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2018-08-01T00:25:08.841Z",
        "id": "page_1",
        "title": "http://localhost:1234/",
        "pageTimings": {
          "onContentLoad": 354.6920000007958,
          "onLoad": 428.44899999909103
        }
      }
    ],
    "entries": [
      {
        "startedDateTime": "2018-08-01T00:25:08.841Z",
        "time": 12.934424998493341,
        "request": {
          "method": "GET",
          "url": "http://localhost:1234/",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:1234"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "_ga=GA1.1.829006498.1522709868; visit=\"v=1&G\""
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_ga",
              "value": "GA1.1.829006498.1522709868",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "visit",
              "value": "\"v=1&G\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 488,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Cache-Control",
              "value": "private, max-age=0, must-revalidate"
            },
            {
              "name": "Last-Modified",
              "value": "Wed, 01 Aug 2018 00:24:11 GMT"
            },
            {
              "name": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "name": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Date",
              "value": "Wed, 01 Aug 2018 00:25:08 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Transfer-Encoding",
              "value": "chunked"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1053,
            "mimeType": "text/html",
            "compression": 517,
            "text": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <title>ProxyApp</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    \n<meta name=\"proxy-app/config/environment\" content=\"%7B%22modulePrefix%22%3A%22proxy-app%22%2C%22environment%22%3A%22development%22%2C%22rootURL%22%3A%22/%22%2C%22locationType%22%3A%22auto%22%2C%22EmberENV%22%3A%7B%22FEATURES%22%3A%7B%7D%2C%22EXTEND_PROTOTYPES%22%3A%7B%22Date%22%3Afalse%7D%7D%2C%22APP%22%3A%7B%22name%22%3A%22proxy-app%22%2C%22version%22%3A%220.0.0+881d7dc7%22%7D%2C%22exportApplicationGlobal%22%3Atrue%7D\" />\n<script src=\"/ember-cli-live-reload.js\" type=\"text/javascript\"></script>\n\n    <link integrity=\"\" rel=\"stylesheet\" href=\"/assets/vendor.css\">\n    <link integrity=\"\" rel=\"stylesheet\" href=\"/assets/proxy-app.css\">\n\n    \n  </head>\n  <body>\n    \n\n    <script src=\"/assets/vendor.js\"></script>\n    <script src=\"/assets/proxy-app.js\"></script>\n\n    \n  </body>\n</html>\n"
          },
          "redirectURL": "",
          "headersSize": 316,
          "bodySize": 536,
          "_transferSize": 852
        },
        "cache": {},
        "timings": {
          "blocked": 1.0574249999983585,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.07400000000000007,
          "wait": 1.6000000004945323,
          "receive": 10.20299999800045,
          "_blocked_queueing": 0.42499999835854396
        },
        "serverIPAddress": "[::1]",
        "connection": "142393",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2018-08-01T00:25:08.861Z",
        "time": 10.611382001519814,
        "request": {
          "method": "GET",
          "url": "http://localhost:1234/ember-cli-live-reload.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "localhost:1234"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Referer",
              "value": "http://localhost:1234/"
            },
            {
              "name": "Cookie",
              "value": "_ga=GA1.1.829006498.1522709868; visit=\"v=1&G\""
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_ga",
              "value": "GA1.1.829006498.1522709868",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "visit",
              "value": "\"v=1&G\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 433,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Date",
              "value": "Wed, 01 Aug 2018 00:25:08 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "ETag",
              "value": "W/\"14e-6h4pfK8RHjxk/ZroCleHncFuVu8\""
            },
            {
              "name": "Content-Length",
              "value": "334"
            },
            {
              "name": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "Content-Type",
              "value": "text/javascript; charset=utf-8"
            }
          ],
          "cookies": [],
          "content": {
            "size": 334,
            "mimeType": "text/javascript",
            "compression": 0,
            "text": "(function() {\n var srcUrl = null;\n var src = srcUrl || ((location.protocol || 'http:') + '//' + (location.hostname || 'localhost') + ':7021/livereload.js');\n var script    = document.createElement('script');\n script.type   = 'text/javascript';\n script.src    = src;\n document.getElementsByTagName('head')[0].appendChild(script);\n}());"
          },
          "redirectURL": "",
          "headersSize": 236,
          "bodySize": 334,
          "_transferSize": 570
        },
        "cache": {},
        "timings": {
          "blocked": 7.429382000001992,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.04499999999999993,
          "wait": 2.078999999868916,
          "receive": 1.0580000016489066,
          "_blocked_queueing": 0.3820000019914005
        },
        "serverIPAddress": "[::1]",
        "connection": "142393",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2018-08-01T00:25:08.861Z",
        "time": 25.23660100131383,
        "request": {
          "method": "GET",
          "url": "http://localhost:1234/assets/vendor.css",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "localhost:1234"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/css,*/*;q=0.1"
            },
            {
              "name": "Referer",
              "value": "http://localhost:1234/"
            },
            {
              "name": "Cookie",
              "value": "_ga=GA1.1.829006498.1522709868; visit=\"v=1&G\""
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_ga",
              "value": "GA1.1.829006498.1522709868",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "visit",
              "value": "\"v=1&G\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 441,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Date",
              "value": "Wed, 01 Aug 2018 00:25:08 GMT"
            },
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Last-Modified",
              "value": "Wed, 01 Aug 2018 00:24:12 GMT"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "Content-Type",
              "value": "text/css; charset=utf-8"
            },
            {
              "name": "Cache-Control",
              "value": "private, max-age=0, must-revalidate"
            },
            {
              "name": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2200,
            "mimeType": "text/css",
            "compression": 1511,
            "text": "#ember-welcome-page-id-selector {\n  padding: 2em;\n  box-shadow: 0 0 0px 10px #FFFBF5;\n  font-family: \"Helvetica Neue\", \"Helvetica\", \"Roboto\", \"Arial\", sans-serif;\n  font-size: 16px;\n  line-height: 1.35em;\n  background: #FFFBF5;\n  color: #865931;\n  height: 100vh;\n}\n#ember-welcome-page-id-selector img {\n  max-width: 100%;\n}\n#ember-welcome-page-id-selector p {\n  margin: 0 0 .75em;\n}\n#ember-welcome-page-id-selector h2 {\n  color: #dd6a58;\n  margin-top: 1em;\n  font-size: 1.75em;\n  line-height: 1.2\n}\n#ember-welcome-page-id-selector a:link,\n#ember-welcome-page-id-selector a:visited {\n  color: #dd6a58;\n  text-decoration: none;\n}\n#ember-welcome-page-id-selector a:hover,\n#ember-welcome-page-id-selector a:active {\n  color: #c13c27;\n}\n#ember-welcome-page-id-selector .tomster {\n  flex: 2;\n}\n#ember-welcome-page-id-selector .welcome {\n  flex: 3;\n}\n#ember-welcome-page-id-selector .columns {\n  display: flex;\n  max-width: 960px;\n  margin: 0 auto;\n}\n#ember-welcome-page-id-selector .welcome ol {\n  list-style: disc;\n  padding-left: 2em;\n  margin-bottom: .75em;\n}\n#ember-welcome-page-id-selector .welcome > ol > li {\n  padding-bottom: .5em;\n}\n#ember-welcome-page-id-selector .postscript {\n  clear: both;\n  text-align: center;\n  padding-top: 3em;\n  font-size: 14px;\n  color: #888;\n  font-style: italic;\n  line-height: 2;\n}\n#ember-welcome-page-id-selector .postscript code {\n  background-color: #F8E7CF;\n  border-radius: 3px;\n  font-family: Menlo, Courier, monospace;\n  font-size: 0.9em;\n  padding: 0.2em 0.5em;\n  margin: 0 0.1em;\n}\n@media (max-width: 700px) {\n  #ember-welcome-page-id-selector {\n    padding: 1em;\n  }\n  #ember-welcome-page-id-selector .columns {\n    flex-direction: column;\n  }\n  #ember-welcome-page-id-selector .welcome,\n  #ember-welcome-page-id-selector .tomster {\n  }\n  #ember-welcome-page-id-selector .tomster img {\n    width: 50%;\n    margin: auto;\n    display: block;\n  }\n  #ember-welcome-page-id-selector h2 {\n    text-align: center;\n  }\n}\n@media (max-width: 400px) {\n  #ember-welcome-page-id-selector .tomster img {\n    width: 60%;\n  }\n  #ember-welcome-page-id-selector .welcome,\n  #ember-welcome-page-id-selector .tomster {\n    width: 100%;\n    float: none;\n    margin: auto;\n  }\n}\n"
          },
          "redirectURL": "",
          "headersSize": 315,
          "bodySize": 689,
          "_transferSize": 1004
        },
        "cache": {},
        "timings": {
          "blocked": 7.2116009999997335,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.04499999999999993,
          "wait": 11.113000001257518,
          "receive": 6.867000000056578,
          "_blocked_queueing": 0.6009999997331761
        },
        "serverIPAddress": "[::1]",
        "connection": "142427",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2018-08-01T00:25:08.861Z",
        "time": 11.866832997096935,
        "request": {
          "method": "GET",
          "url": "http://localhost:1234/assets/proxy-app.css",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "localhost:1234"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/css,*/*;q=0.1"
            },
            {
              "name": "Referer",
              "value": "http://localhost:1234/"
            },
            {
              "name": "Cookie",
              "value": "_ga=GA1.1.829006498.1522709868; visit=\"v=1&G\""
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_ga",
              "value": "GA1.1.829006498.1522709868",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "visit",
              "value": "\"v=1&G\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 444,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Date",
              "value": "Wed, 01 Aug 2018 00:25:08 GMT"
            },
            {
              "name": "Last-Modified",
              "value": "Tue, 31 Jul 2018 22:26:14 GMT"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "Content-Type",
              "value": "text/css; charset=utf-8"
            },
            {
              "name": "Cache-Control",
              "value": "private, max-age=0, must-revalidate"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "0"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/css",
            "compression": 0,
            "text": ""
          },
          "redirectURL": "",
          "headersSize": 282,
          "bodySize": 0,
          "_transferSize": 282
        },
        "cache": {},
        "timings": {
          "blocked": 7.515832999998238,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.04400000000000048,
          "wait": 2.751000001481967,
          "receive": 1.5559999956167303,
          "_blocked_queueing": 0.8329999982379377
        },
        "serverIPAddress": "[::1]",
        "connection": "142419",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2018-08-01T00:25:08.861Z",
        "time": 206.4850020020931,
        "request": {
          "method": "GET",
          "url": "http://localhost:1234/assets/vendor.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "localhost:1234"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Referer",
              "value": "http://localhost:1234/"
            },
            {
              "name": "Cookie",
              "value": "_ga=GA1.1.829006498.1522709868; visit=\"v=1&G\""
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_ga",
              "value": "GA1.1.829006498.1522709868",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "visit",
              "value": "\"v=1&G\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 425,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Date",
              "value": "Wed, 01 Aug 2018 00:25:08 GMT"
            },
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Last-Modified",
              "value": "Wed, 01 Aug 2018 00:24:12 GMT"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "Cache-Control",
              "value": "private, max-age=0, must-revalidate"
            },
            {
              "name": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2783982,
            "mimeType": "application/javascript",
            "compression": 2183419,
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 329,
          "bodySize": 600563,
          "_transferSize": 600892
        },
        "cache": {},
        "timings": {
          "blocked": 7.341002000000881,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.02400000000000002,
          "wait": 81.24200000116392,
          "receive": 117.8780000009283,
          "_blocked_queueing": 1.0020000008807983
        },
        "serverIPAddress": "[::1]",
        "connection": "142391",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2018-08-01T00:25:08.861Z",
        "time": 90.64137700013694,
        "request": {
          "method": "GET",
          "url": "http://localhost:1234/assets/proxy-app.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "localhost:1234"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Referer",
              "value": "http://localhost:1234/"
            },
            {
              "name": "Cookie",
              "value": "_ga=GA1.1.829006498.1522709868; visit=\"v=1&G\""
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_ga",
              "value": "GA1.1.829006498.1522709868",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "visit",
              "value": "\"v=1&G\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 428,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Date",
              "value": "Wed, 01 Aug 2018 00:25:08 GMT"
            },
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Last-Modified",
              "value": "Wed, 01 Aug 2018 00:24:24 GMT"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "Cache-Control",
              "value": "private, max-age=0, must-revalidate"
            },
            {
              "name": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "content": {
            "size": 8140,
            "mimeType": "application/javascript",
            "compression": 6130,
            "text": "\"use strict\";\n\n\n\n;define('proxy-app/app', ['exports', 'proxy-app/resolver', 'ember-load-initializers', 'proxy-app/config/environment'], function (exports, _resolver, _emberLoadInitializers, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  const App = Ember.Application.extend({\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix,\n    Resolver: _resolver.default\n  });\n\n  (0, _emberLoadInitializers.default)(App, _environment.default.modulePrefix);\n\n  exports.default = App;\n});\n;define('proxy-app/components/welcome-page', ['exports', 'ember-welcome-page/components/welcome-page'], function (exports, _welcomePage) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function () {\n      return _welcomePage.default;\n    }\n  });\n});\n;define('proxy-app/helpers/app-version', ['exports', 'proxy-app/config/environment', 'ember-cli-app-version/utils/regexp'], function (exports, _environment, _regexp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.appVersion = appVersion;\n  function appVersion(_, hash = {}) {\n    const version = _environment.default.APP.version;\n    // e.g. 1.0.0-alpha.1+4jds75hf\n\n    // Allow use of 'hideSha' and 'hideVersion' For backwards compatibility\n    let versionOnly = hash.versionOnly || hash.hideSha;\n    let shaOnly = hash.shaOnly || hash.hideVersion;\n\n    let match = null;\n\n    if (versionOnly) {\n      if (hash.showExtended) {\n        match = version.match(_regexp.versionExtendedRegExp); // 1.0.0-alpha.1\n      }\n      // Fallback to just version\n      if (!match) {\n        match = version.match(_regexp.versionRegExp); // 1.0.0\n      }\n    }\n\n    if (shaOnly) {\n      match = version.match(_regexp.shaRegExp); // 4jds75hf\n    }\n\n    return match ? match[0] : version;\n  }\n\n  exports.default = Ember.Helper.helper(appVersion);\n});\n;define('proxy-app/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _pluralize) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _pluralize.default;\n});\n;define('proxy-app/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _singularize) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _singularize.default;\n});\n;define('proxy-app/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'proxy-app/config/environment'], function (exports, _initializerFactory, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  let name, version;\n  if (_environment.default.APP) {\n    name = _environment.default.APP.name;\n    version = _environment.default.APP.version;\n  }\n\n  exports.default = {\n    name: 'App Version',\n    initialize: (0, _initializerFactory.default)(name, version)\n  };\n});\n;define('proxy-app/initializers/container-debug-adapter', ['exports', 'ember-resolver/resolvers/classic/container-debug-adapter'], function (exports, _containerDebugAdapter) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: 'container-debug-adapter',\n\n    initialize() {\n      let app = arguments[1] || arguments[0];\n\n      app.register('container-debug-adapter:main', _containerDebugAdapter.default);\n      app.inject('container-debug-adapter:main', 'namespace', 'application:main');\n    }\n  };\n});\n;define('proxy-app/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data'], function (exports, _setupContainer) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: 'ember-data',\n    initialize: _setupContainer.default\n  };\n});\n;define('proxy-app/initializers/export-application-global', ['exports', 'proxy-app/config/environment'], function (exports, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.initialize = initialize;\n  function initialize() {\n    var application = arguments[1] || arguments[0];\n    if (_environment.default.exportApplicationGlobal !== false) {\n      var theGlobal;\n      if (typeof window !== 'undefined') {\n        theGlobal = window;\n      } else if (typeof global !== 'undefined') {\n        theGlobal = global;\n      } else if (typeof self !== 'undefined') {\n        theGlobal = self;\n      } else {\n        // no reasonable global, just bail\n        return;\n      }\n\n      var value = _environment.default.exportApplicationGlobal;\n      var globalName;\n\n      if (typeof value === 'string') {\n        globalName = value;\n      } else {\n        globalName = Ember.String.classify(_environment.default.modulePrefix);\n      }\n\n      if (!theGlobal[globalName]) {\n        theGlobal[globalName] = application;\n\n        application.reopen({\n          willDestroy: function () {\n            this._super.apply(this, arguments);\n            delete theGlobal[globalName];\n          }\n        });\n      }\n    }\n  }\n\n  exports.default = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n});\n;define(\"proxy-app/instance-initializers/ember-data\", [\"exports\", \"ember-data/initialize-store-service\"], function (exports, _initializeStoreService) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: \"ember-data\",\n    initialize: _initializeStoreService.default\n  };\n});\n;define('proxy-app/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _emberResolver.default;\n});\n;define('proxy-app/router', ['exports', 'proxy-app/config/environment'], function (exports, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  const Router = Ember.Router.extend({\n    location: _environment.default.locationType,\n    rootURL: _environment.default.rootURL\n  });\n\n  Router.map(function () {});\n\n  exports.default = Router;\n});\n;define('proxy-app/routes/application', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Route.extend({\n    model() {\n      return fetch('api/profile.json').then(response => {\n        return response.json();\n      });\n    }\n  });\n});\n;define('proxy-app/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _ajax) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function () {\n      return _ajax.default;\n    }\n  });\n});\n;define(\"proxy-app/templates/application\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.HTMLBars.template({ \"id\": \"pR9QxS3u\", \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[21,\\\"outlet\\\"],false]],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"proxy-app/templates/application.hbs\" } });\n});\n;\n\n;define('proxy-app/config/environment', [], function() {\n  var prefix = 'proxy-app';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n\n;\n          if (!runningTests) {\n            require(\"proxy-app/app\")[\"default\"].create({\"name\":\"proxy-app\",\"version\":\"0.0.0+881d7dc7\"});\n          }\n        \n//# sourceMappingURL=proxy-app.map\n"
          },
          "redirectURL": "",
          "headersSize": 329,
          "bodySize": 2010,
          "_transferSize": 2339
        },
        "cache": {},
        "timings": {
          "blocked": 6.386377000000502,
          "dns": 0.006000000000000227,
          "ssl": -1,
          "connect": 0.18299999999999983,
          "send": 0.9320000000000004,
          "wait": 80.13600000020233,
          "receive": 2.997999999934109,
          "_blocked_queueing": 1.3770000005024485
        },
        "serverIPAddress": "[::1]",
        "connection": "142531",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2018-08-01T00:25:08.873Z",
        "time": 81.02187600178513,
        "request": {
          "method": "GET",
          "url": "http://localhost:7021/livereload.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "localhost:7021"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Referer",
              "value": "http://localhost:1234/"
            },
            {
              "name": "Cookie",
              "value": "_ga=GA1.1.829006498.1522709868; visit=\"v=1&G\""
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_ga",
              "value": "GA1.1.829006498.1522709868",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "visit",
              "value": "\"v=1&G\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 422,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Date",
              "value": "Wed, 01 Aug 2018 00:25:08 GMT"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript"
            }
          ],
          "cookies": [],
          "content": {
            "size": 39120,
            "mimeType": "application/javascript",
            "compression": -13,
            "text": "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function() {\n  var Connector, PROTOCOL_6, PROTOCOL_7, Parser, Version, _ref;\n\n  _ref = require('./protocol'), Parser = _ref.Parser, PROTOCOL_6 = _ref.PROTOCOL_6, PROTOCOL_7 = _ref.PROTOCOL_7;\n\n  Version = '2.2.2';\n\n  exports.Connector = Connector = (function() {\n    function Connector(options, WebSocket, Timer, handlers) {\n      var path;\n      this.options = options;\n      this.WebSocket = WebSocket;\n      this.Timer = Timer;\n      this.handlers = handlers;\n      path = this.options.path ? \"\" + this.options.path : \"livereload\";\n      this._uri = \"ws\" + (this.options.https ? \"s\" : \"\") + \"://\" + this.options.host + \":\" + this.options.port + \"/\" + path;\n      this._nextDelay = this.options.mindelay;\n      this._connectionDesired = false;\n      this.protocol = 0;\n      this.protocolParser = new Parser({\n        connected: (function(_this) {\n          return function(protocol) {\n            _this.protocol = protocol;\n            _this._handshakeTimeout.stop();\n            _this._nextDelay = _this.options.mindelay;\n            _this._disconnectionReason = 'broken';\n            return _this.handlers.connected(protocol);\n          };\n        })(this),\n        error: (function(_this) {\n          return function(e) {\n            _this.handlers.error(e);\n            return _this._closeOnError();\n          };\n        })(this),\n        message: (function(_this) {\n          return function(message) {\n            return _this.handlers.message(message);\n          };\n        })(this)\n      });\n      this._handshakeTimeout = new Timer((function(_this) {\n        return function() {\n          if (!_this._isSocketConnected()) {\n            return;\n          }\n          _this._disconnectionReason = 'handshake-timeout';\n          return _this.socket.close();\n        };\n      })(this));\n      this._reconnectTimer = new Timer((function(_this) {\n        return function() {\n          if (!_this._connectionDesired) {\n            return;\n          }\n          return _this.connect();\n        };\n      })(this));\n      this.connect();\n    }\n\n    Connector.prototype._isSocketConnected = function() {\n      return this.socket && this.socket.readyState === this.WebSocket.OPEN;\n    };\n\n    Connector.prototype.connect = function() {\n      this._connectionDesired = true;\n      if (this._isSocketConnected()) {\n        return;\n      }\n      this._reconnectTimer.stop();\n      this._disconnectionReason = 'cannot-connect';\n      this.protocolParser.reset();\n      this.handlers.connecting();\n      this.socket = new this.WebSocket(this._uri);\n      this.socket.onopen = (function(_this) {\n        return function(e) {\n          return _this._onopen(e);\n        };\n      })(this);\n      this.socket.onclose = (function(_this) {\n        return function(e) {\n          return _this._onclose(e);\n        };\n      })(this);\n      this.socket.onmessage = (function(_this) {\n        return function(e) {\n          return _this._onmessage(e);\n        };\n      })(this);\n      return this.socket.onerror = (function(_this) {\n        return function(e) {\n          return _this._onerror(e);\n        };\n      })(this);\n    };\n\n    Connector.prototype.disconnect = function() {\n      this._connectionDesired = false;\n      this._reconnectTimer.stop();\n      if (!this._isSocketConnected()) {\n        return;\n      }\n      this._disconnectionReason = 'manual';\n      return this.socket.close();\n    };\n\n    Connector.prototype._scheduleReconnection = function() {\n      if (!this._connectionDesired) {\n        return;\n      }\n      if (!this._reconnectTimer.running) {\n        this._reconnectTimer.start(this._nextDelay);\n        return this._nextDelay = Math.min(this.options.maxdelay, this._nextDelay * 2);\n      }\n    };\n\n    Connector.prototype.sendCommand = function(command) {\n      if (this.protocol == null) {\n        return;\n      }\n      return this._sendCommand(command);\n    };\n\n    Connector.prototype._sendCommand = function(command) {\n      return this.socket.send(JSON.stringify(command));\n    };\n\n    Connector.prototype._closeOnError = function() {\n      this._handshakeTimeout.stop();\n      this._disconnectionReason = 'error';\n      return this.socket.close();\n    };\n\n    Connector.prototype._onopen = function(e) {\n      var hello;\n      this.handlers.socketConnected();\n      this._disconnectionReason = 'handshake-failed';\n      hello = {\n        command: 'hello',\n        protocols: [PROTOCOL_6, PROTOCOL_7]\n      };\n      hello.ver = Version;\n      if (this.options.ext) {\n        hello.ext = this.options.ext;\n      }\n      if (this.options.extver) {\n        hello.extver = this.options.extver;\n      }\n      if (this.options.snipver) {\n        hello.snipver = this.options.snipver;\n      }\n      this._sendCommand(hello);\n      return this._handshakeTimeout.start(this.options.handshake_timeout);\n    };\n\n    Connector.prototype._onclose = function(e) {\n      this.protocol = 0;\n      this.handlers.disconnected(this._disconnectionReason, this._nextDelay);\n      return this._scheduleReconnection();\n    };\n\n    Connector.prototype._onerror = function(e) {};\n\n    Connector.prototype._onmessage = function(e) {\n      return this.protocolParser.process(e.data);\n    };\n\n    return Connector;\n\n  })();\n\n}).call(this);\n\n},{\"./protocol\":6}],2:[function(require,module,exports){\n(function() {\n  var CustomEvents;\n\n  CustomEvents = {\n    bind: function(element, eventName, handler) {\n      if (element.addEventListener) {\n        return element.addEventListener(eventName, handler, false);\n      } else if (element.attachEvent) {\n        element[eventName] = 1;\n        return element.attachEvent('onpropertychange', function(event) {\n          if (event.propertyName === eventName) {\n            return handler();\n          }\n        });\n      } else {\n        throw new Error(\"Attempt to attach custom event \" + eventName + \" to something which isn't a DOMElement\");\n      }\n    },\n    fire: function(element, eventName) {\n      var event;\n      if (element.addEventListener) {\n        event = document.createEvent('HTMLEvents');\n        event.initEvent(eventName, true, true);\n        return document.dispatchEvent(event);\n      } else if (element.attachEvent) {\n        if (element[eventName]) {\n          return element[eventName]++;\n        }\n      } else {\n        throw new Error(\"Attempt to fire custom event \" + eventName + \" on something which isn't a DOMElement\");\n      }\n    }\n  };\n\n  exports.bind = CustomEvents.bind;\n\n  exports.fire = CustomEvents.fire;\n\n}).call(this);\n\n},{}],3:[function(require,module,exports){\n(function() {\n  var LessPlugin;\n\n  module.exports = LessPlugin = (function() {\n    LessPlugin.identifier = 'less';\n\n    LessPlugin.version = '1.0';\n\n    function LessPlugin(window, host) {\n      this.window = window;\n      this.host = host;\n    }\n\n    LessPlugin.prototype.reload = function(path, options) {\n      if (this.window.less && this.window.less.refresh) {\n        if (path.match(/\\.less$/i)) {\n          return this.reloadLess(path);\n        }\n        if (options.originalPath.match(/\\.less$/i)) {\n          return this.reloadLess(options.originalPath);\n        }\n      }\n      return false;\n    };\n\n    LessPlugin.prototype.reloadLess = function(path) {\n      var link, links, _i, _len;\n      links = (function() {\n        var _i, _len, _ref, _results;\n        _ref = document.getElementsByTagName('link');\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          link = _ref[_i];\n          if (link.href && link.rel.match(/^stylesheet\\/less$/i) || (link.rel.match(/stylesheet/i) && link.type.match(/^text\\/(x-)?less$/i))) {\n            _results.push(link);\n          }\n        }\n        return _results;\n      })();\n      if (links.length === 0) {\n        return false;\n      }\n      for (_i = 0, _len = links.length; _i < _len; _i++) {\n        link = links[_i];\n        link.href = this.host.generateCacheBustUrl(link.href);\n      }\n      this.host.console.log(\"LiveReload is asking LESS to recompile all stylesheets\");\n      this.window.less.refresh(true);\n      return true;\n    };\n\n    LessPlugin.prototype.analyze = function() {\n      return {\n        disable: !!(this.window.less && this.window.less.refresh)\n      };\n    };\n\n    return LessPlugin;\n\n  })();\n\n}).call(this);\n\n},{}],4:[function(require,module,exports){\n(function() {\n  var Connector, LiveReload, Options, ProtocolError, Reloader, Timer,\n    __hasProp = {}.hasOwnProperty;\n\n  Connector = require('./connector').Connector;\n\n  Timer = require('./timer').Timer;\n\n  Options = require('./options').Options;\n\n  Reloader = require('./reloader').Reloader;\n\n  ProtocolError = require('./protocol').ProtocolError;\n\n  exports.LiveReload = LiveReload = (function() {\n    function LiveReload(window) {\n      var k, v, _ref;\n      this.window = window;\n      this.listeners = {};\n      this.plugins = [];\n      this.pluginIdentifiers = {};\n      this.console = this.window.console && this.window.console.log && this.window.console.error ? this.window.location.href.match(/LR-verbose/) ? this.window.console : {\n        log: function() {},\n        error: this.window.console.error.bind(this.window.console)\n      } : {\n        log: function() {},\n        error: function() {}\n      };\n      if (!(this.WebSocket = this.window.WebSocket || this.window.MozWebSocket)) {\n        this.console.error(\"LiveReload disabled because the browser does not seem to support web sockets\");\n        return;\n      }\n      if ('LiveReloadOptions' in window) {\n        this.options = new Options();\n        _ref = window['LiveReloadOptions'];\n        for (k in _ref) {\n          if (!__hasProp.call(_ref, k)) continue;\n          v = _ref[k];\n          this.options.set(k, v);\n        }\n      } else {\n        this.options = Options.extract(this.window.document);\n        if (!this.options) {\n          this.console.error(\"LiveReload disabled because it could not find its own <SCRIPT> tag\");\n          return;\n        }\n      }\n      this.reloader = new Reloader(this.window, this.console, Timer);\n      this.connector = new Connector(this.options, this.WebSocket, Timer, {\n        connecting: (function(_this) {\n          return function() {};\n        })(this),\n        socketConnected: (function(_this) {\n          return function() {};\n        })(this),\n        connected: (function(_this) {\n          return function(protocol) {\n            var _base;\n            if (typeof (_base = _this.listeners).connect === \"function\") {\n              _base.connect();\n            }\n            _this.log(\"LiveReload is connected to \" + _this.options.host + \":\" + _this.options.port + \" (protocol v\" + protocol + \").\");\n            return _this.analyze();\n          };\n        })(this),\n        error: (function(_this) {\n          return function(e) {\n            if (e instanceof ProtocolError) {\n              if (typeof console !== \"undefined\" && console !== null) {\n                return console.log(\"\" + e.message + \".\");\n              }\n            } else {\n              if (typeof console !== \"undefined\" && console !== null) {\n                return console.log(\"LiveReload internal error: \" + e.message);\n              }\n            }\n          };\n        })(this),\n        disconnected: (function(_this) {\n          return function(reason, nextDelay) {\n            var _base;\n            if (typeof (_base = _this.listeners).disconnect === \"function\") {\n              _base.disconnect();\n            }\n            switch (reason) {\n              case 'cannot-connect':\n                return _this.log(\"LiveReload cannot connect to \" + _this.options.host + \":\" + _this.options.port + \", will retry in \" + nextDelay + \" sec.\");\n              case 'broken':\n                return _this.log(\"LiveReload disconnected from \" + _this.options.host + \":\" + _this.options.port + \", reconnecting in \" + nextDelay + \" sec.\");\n              case 'handshake-timeout':\n                return _this.log(\"LiveReload cannot connect to \" + _this.options.host + \":\" + _this.options.port + \" (handshake timeout), will retry in \" + nextDelay + \" sec.\");\n              case 'handshake-failed':\n                return _this.log(\"LiveReload cannot connect to \" + _this.options.host + \":\" + _this.options.port + \" (handshake failed), will retry in \" + nextDelay + \" sec.\");\n              case 'manual':\n                break;\n              case 'error':\n                break;\n              default:\n                return _this.log(\"LiveReload disconnected from \" + _this.options.host + \":\" + _this.options.port + \" (\" + reason + \"), reconnecting in \" + nextDelay + \" sec.\");\n            }\n          };\n        })(this),\n        message: (function(_this) {\n          return function(message) {\n            switch (message.command) {\n              case 'reload':\n                return _this.performReload(message);\n              case 'alert':\n                return _this.performAlert(message);\n            }\n          };\n        })(this)\n      });\n      this.initialized = true;\n    }\n\n    LiveReload.prototype.on = function(eventName, handler) {\n      return this.listeners[eventName] = handler;\n    };\n\n    LiveReload.prototype.log = function(message) {\n      return this.console.log(\"\" + message);\n    };\n\n    LiveReload.prototype.performReload = function(message) {\n      var _ref, _ref1, _ref2;\n      this.log(\"LiveReload received reload request: \" + (JSON.stringify(message, null, 2)));\n      return this.reloader.reload(message.path, {\n        liveCSS: (_ref = message.liveCSS) != null ? _ref : true,\n        liveImg: (_ref1 = message.liveImg) != null ? _ref1 : true,\n        reloadMissingCSS: (_ref2 = message.reloadMissingCSS) != null ? _ref2 : true,\n        originalPath: message.originalPath || '',\n        overrideURL: message.overrideURL || '',\n        serverURL: \"http://\" + this.options.host + \":\" + this.options.port\n      });\n    };\n\n    LiveReload.prototype.performAlert = function(message) {\n      return alert(message.message);\n    };\n\n    LiveReload.prototype.shutDown = function() {\n      var _base;\n      if (!this.initialized) {\n        return;\n      }\n      this.connector.disconnect();\n      this.log(\"LiveReload disconnected.\");\n      return typeof (_base = this.listeners).shutdown === \"function\" ? _base.shutdown() : void 0;\n    };\n\n    LiveReload.prototype.hasPlugin = function(identifier) {\n      return !!this.pluginIdentifiers[identifier];\n    };\n\n    LiveReload.prototype.addPlugin = function(pluginClass) {\n      var plugin;\n      if (!this.initialized) {\n        return;\n      }\n      if (this.hasPlugin(pluginClass.identifier)) {\n        return;\n      }\n      this.pluginIdentifiers[pluginClass.identifier] = true;\n      plugin = new pluginClass(this.window, {\n        _livereload: this,\n        _reloader: this.reloader,\n        _connector: this.connector,\n        console: this.console,\n        Timer: Timer,\n        generateCacheBustUrl: (function(_this) {\n          return function(url) {\n            return _this.reloader.generateCacheBustUrl(url);\n          };\n        })(this)\n      });\n      this.plugins.push(plugin);\n      this.reloader.addPlugin(plugin);\n    };\n\n    LiveReload.prototype.analyze = function() {\n      var plugin, pluginData, pluginsData, _i, _len, _ref;\n      if (!this.initialized) {\n        return;\n      }\n      if (!(this.connector.protocol >= 7)) {\n        return;\n      }\n      pluginsData = {};\n      _ref = this.plugins;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        plugin = _ref[_i];\n        pluginsData[plugin.constructor.identifier] = pluginData = (typeof plugin.analyze === \"function\" ? plugin.analyze() : void 0) || {};\n        pluginData.version = plugin.constructor.version;\n      }\n      this.connector.sendCommand({\n        command: 'info',\n        plugins: pluginsData,\n        url: this.window.location.href\n      });\n    };\n\n    return LiveReload;\n\n  })();\n\n}).call(this);\n\n},{\"./connector\":1,\"./options\":5,\"./protocol\":6,\"./reloader\":7,\"./timer\":9}],5:[function(require,module,exports){\n(function() {\n  var Options;\n\n  exports.Options = Options = (function() {\n    function Options() {\n      this.https = false;\n      this.host = null;\n      this.port = 35729;\n      this.snipver = null;\n      this.ext = null;\n      this.extver = null;\n      this.mindelay = 1000;\n      this.maxdelay = 60000;\n      this.handshake_timeout = 5000;\n    }\n\n    Options.prototype.set = function(name, value) {\n      if (typeof value === 'undefined') {\n        return;\n      }\n      if (!isNaN(+value)) {\n        value = +value;\n      }\n      return this[name] = value;\n    };\n\n    return Options;\n\n  })();\n\n  Options.extract = function(document) {\n    var element, keyAndValue, m, mm, options, pair, src, _i, _j, _len, _len1, _ref, _ref1;\n    _ref = document.getElementsByTagName('script');\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      element = _ref[_i];\n      if ((src = element.src) && (m = src.match(/^[^:]+:\\/\\/(.*)\\/z?livereload\\.js(?:\\?(.*))?$/))) {\n        options = new Options();\n        options.https = src.indexOf(\"https\") === 0;\n        if (mm = m[1].match(/^([^\\/:]+)(?::(\\d+))?$/)) {\n          options.host = mm[1];\n          if (mm[2]) {\n            options.port = parseInt(mm[2], 10);\n          }\n        }\n        if (m[2]) {\n          _ref1 = m[2].split('&');\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            pair = _ref1[_j];\n            if ((keyAndValue = pair.split('=')).length > 1) {\n              options.set(keyAndValue[0].replace(/-/g, '_'), keyAndValue.slice(1).join('='));\n            }\n          }\n        }\n        return options;\n      }\n    }\n    return null;\n  };\n\n}).call(this);\n\n},{}],6:[function(require,module,exports){\n(function() {\n  var PROTOCOL_6, PROTOCOL_7, Parser, ProtocolError,\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  exports.PROTOCOL_6 = PROTOCOL_6 = 'http://livereload.com/protocols/official-6';\n\n  exports.PROTOCOL_7 = PROTOCOL_7 = 'http://livereload.com/protocols/official-7';\n\n  exports.ProtocolError = ProtocolError = (function() {\n    function ProtocolError(reason, data) {\n      this.message = \"LiveReload protocol error (\" + reason + \") after receiving data: \\\"\" + data + \"\\\".\";\n    }\n\n    return ProtocolError;\n\n  })();\n\n  exports.Parser = Parser = (function() {\n    function Parser(handlers) {\n      this.handlers = handlers;\n      this.reset();\n    }\n\n    Parser.prototype.reset = function() {\n      return this.protocol = null;\n    };\n\n    Parser.prototype.process = function(data) {\n      var command, e, message, options, _ref;\n      try {\n        if (this.protocol == null) {\n          if (data.match(/^!!ver:([\\d.]+)$/)) {\n            this.protocol = 6;\n          } else if (message = this._parseMessage(data, ['hello'])) {\n            if (!message.protocols.length) {\n              throw new ProtocolError(\"no protocols specified in handshake message\");\n            } else if (__indexOf.call(message.protocols, PROTOCOL_7) >= 0) {\n              this.protocol = 7;\n            } else if (__indexOf.call(message.protocols, PROTOCOL_6) >= 0) {\n              this.protocol = 6;\n            } else {\n              throw new ProtocolError(\"no supported protocols found\");\n            }\n          }\n          return this.handlers.connected(this.protocol);\n        } else if (this.protocol === 6) {\n          message = JSON.parse(data);\n          if (!message.length) {\n            throw new ProtocolError(\"protocol 6 messages must be arrays\");\n          }\n          command = message[0], options = message[1];\n          if (command !== 'refresh') {\n            throw new ProtocolError(\"unknown protocol 6 command\");\n          }\n          return this.handlers.message({\n            command: 'reload',\n            path: options.path,\n            liveCSS: (_ref = options.apply_css_live) != null ? _ref : true\n          });\n        } else {\n          message = this._parseMessage(data, ['reload', 'alert']);\n          return this.handlers.message(message);\n        }\n      } catch (_error) {\n        e = _error;\n        if (e instanceof ProtocolError) {\n          return this.handlers.error(e);\n        } else {\n          throw e;\n        }\n      }\n    };\n\n    Parser.prototype._parseMessage = function(data, validCommands) {\n      var e, message, _ref;\n      try {\n        message = JSON.parse(data);\n      } catch (_error) {\n        e = _error;\n        throw new ProtocolError('unparsable JSON', data);\n      }\n      if (!message.command) {\n        throw new ProtocolError('missing \"command\" key', data);\n      }\n      if (_ref = message.command, __indexOf.call(validCommands, _ref) < 0) {\n        throw new ProtocolError(\"invalid command '\" + message.command + \"', only valid commands are: \" + (validCommands.join(', ')) + \")\", data);\n      }\n      return message;\n    };\n\n    return Parser;\n\n  })();\n\n}).call(this);\n\n},{}],7:[function(require,module,exports){\n(function() {\n  var IMAGE_STYLES, Reloader, numberOfMatchingSegments, pathFromUrl, pathsMatch, pickBestMatch, splitUrl;\n\n  splitUrl = function(url) {\n    var comboSign, hash, index, params;\n    if ((index = url.indexOf('#')) >= 0) {\n      hash = url.slice(index);\n      url = url.slice(0, index);\n    } else {\n      hash = '';\n    }\n    comboSign = url.indexOf('??');\n    if (comboSign >= 0) {\n      if (comboSign + 1 !== url.lastIndexOf('?')) {\n        index = url.lastIndexOf('?');\n      }\n    } else {\n      index = url.indexOf('?');\n    }\n    if (index >= 0) {\n      params = url.slice(index);\n      url = url.slice(0, index);\n    } else {\n      params = '';\n    }\n    return {\n      url: url,\n      params: params,\n      hash: hash\n    };\n  };\n\n  pathFromUrl = function(url) {\n    var path;\n    url = splitUrl(url).url;\n    if (url.indexOf('file://') === 0) {\n      path = url.replace(/^file:\\/\\/(localhost)?/, '');\n    } else {\n      path = url.replace(/^([^:]+:)?\\/\\/([^:\\/]+)(:\\d*)?\\//, '/');\n    }\n    return decodeURIComponent(path);\n  };\n\n  pickBestMatch = function(path, objects, pathFunc) {\n    var bestMatch, object, score, _i, _len;\n    bestMatch = {\n      score: 0\n    };\n    for (_i = 0, _len = objects.length; _i < _len; _i++) {\n      object = objects[_i];\n      score = numberOfMatchingSegments(path, pathFunc(object));\n      if (score > bestMatch.score) {\n        bestMatch = {\n          object: object,\n          score: score\n        };\n      }\n    }\n    if (bestMatch.score > 0) {\n      return bestMatch;\n    } else {\n      return null;\n    }\n  };\n\n  numberOfMatchingSegments = function(path1, path2) {\n    var comps1, comps2, eqCount, len;\n    path1 = path1.replace(/^\\/+/, '').toLowerCase();\n    path2 = path2.replace(/^\\/+/, '').toLowerCase();\n    if (path1 === path2) {\n      return 10000;\n    }\n    comps1 = path1.split('/').reverse();\n    comps2 = path2.split('/').reverse();\n    len = Math.min(comps1.length, comps2.length);\n    eqCount = 0;\n    while (eqCount < len && comps1[eqCount] === comps2[eqCount]) {\n      ++eqCount;\n    }\n    return eqCount;\n  };\n\n  pathsMatch = function(path1, path2) {\n    return numberOfMatchingSegments(path1, path2) > 0;\n  };\n\n  IMAGE_STYLES = [\n    {\n      selector: 'background',\n      styleNames: ['backgroundImage']\n    }, {\n      selector: 'border',\n      styleNames: ['borderImage', 'webkitBorderImage', 'MozBorderImage']\n    }\n  ];\n\n  exports.Reloader = Reloader = (function() {\n    function Reloader(window, console, Timer) {\n      this.window = window;\n      this.console = console;\n      this.Timer = Timer;\n      this.document = this.window.document;\n      this.importCacheWaitPeriod = 200;\n      this.plugins = [];\n    }\n\n    Reloader.prototype.addPlugin = function(plugin) {\n      return this.plugins.push(plugin);\n    };\n\n    Reloader.prototype.analyze = function(callback) {\n      return results;\n    };\n\n    Reloader.prototype.reload = function(path, options) {\n      var plugin, _base, _i, _len, _ref;\n      this.options = options;\n      if ((_base = this.options).stylesheetReloadTimeout == null) {\n        _base.stylesheetReloadTimeout = 15000;\n      }\n      _ref = this.plugins;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        plugin = _ref[_i];\n        if (plugin.reload && plugin.reload(path, options)) {\n          return;\n        }\n      }\n      if (options.liveCSS && path.match(/\\.css(?:\\.map)?$/i)) {\n        if (this.reloadStylesheet(path)) {\n          return;\n        }\n      }\n      if (options.liveImg && path.match(/\\.(jpe?g|png|gif)$/i)) {\n        this.reloadImages(path);\n        return;\n      }\n      if (options.isChromeExtension) {\n        this.reloadChromeExtension();\n        return;\n      }\n      return this.reloadPage();\n    };\n\n    Reloader.prototype.reloadPage = function() {\n      return this.window.document.location.reload();\n    };\n\n    Reloader.prototype.reloadChromeExtension = function() {\n      return this.window.chrome.runtime.reload();\n    };\n\n    Reloader.prototype.reloadImages = function(path) {\n      var expando, img, selector, styleNames, styleSheet, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _results;\n      expando = this.generateUniqueString();\n      _ref = this.document.images;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        img = _ref[_i];\n        if (pathsMatch(path, pathFromUrl(img.src))) {\n          img.src = this.generateCacheBustUrl(img.src, expando);\n        }\n      }\n      if (this.document.querySelectorAll) {\n        for (_j = 0, _len1 = IMAGE_STYLES.length; _j < _len1; _j++) {\n          _ref1 = IMAGE_STYLES[_j], selector = _ref1.selector, styleNames = _ref1.styleNames;\n          _ref2 = this.document.querySelectorAll(\"[style*=\" + selector + \"]\");\n          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n            img = _ref2[_k];\n            this.reloadStyleImages(img.style, styleNames, path, expando);\n          }\n        }\n      }\n      if (this.document.styleSheets) {\n        _ref3 = this.document.styleSheets;\n        _results = [];\n        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {\n          styleSheet = _ref3[_l];\n          _results.push(this.reloadStylesheetImages(styleSheet, path, expando));\n        }\n        return _results;\n      }\n    };\n\n    Reloader.prototype.reloadStylesheetImages = function(styleSheet, path, expando) {\n      var e, rule, rules, styleNames, _i, _j, _len, _len1;\n      try {\n        rules = styleSheet != null ? styleSheet.cssRules : void 0;\n      } catch (_error) {\n        e = _error;\n      }\n      if (!rules) {\n        return;\n      }\n      for (_i = 0, _len = rules.length; _i < _len; _i++) {\n        rule = rules[_i];\n        switch (rule.type) {\n          case CSSRule.IMPORT_RULE:\n            this.reloadStylesheetImages(rule.styleSheet, path, expando);\n            break;\n          case CSSRule.STYLE_RULE:\n            for (_j = 0, _len1 = IMAGE_STYLES.length; _j < _len1; _j++) {\n              styleNames = IMAGE_STYLES[_j].styleNames;\n              this.reloadStyleImages(rule.style, styleNames, path, expando);\n            }\n            break;\n          case CSSRule.MEDIA_RULE:\n            this.reloadStylesheetImages(rule, path, expando);\n        }\n      }\n    };\n\n    Reloader.prototype.reloadStyleImages = function(style, styleNames, path, expando) {\n      var newValue, styleName, value, _i, _len;\n      for (_i = 0, _len = styleNames.length; _i < _len; _i++) {\n        styleName = styleNames[_i];\n        value = style[styleName];\n        if (typeof value === 'string') {\n          newValue = value.replace(/\\burl\\s*\\(([^)]*)\\)/, (function(_this) {\n            return function(match, src) {\n              if (pathsMatch(path, pathFromUrl(src))) {\n                return \"url(\" + (_this.generateCacheBustUrl(src, expando)) + \")\";\n              } else {\n                return match;\n              }\n            };\n          })(this));\n          if (newValue !== value) {\n            style[styleName] = newValue;\n          }\n        }\n      }\n    };\n\n    Reloader.prototype.reloadStylesheet = function(path) {\n      var imported, link, links, match, style, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;\n      links = (function() {\n        var _i, _len, _ref, _results;\n        _ref = this.document.getElementsByTagName('link');\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          link = _ref[_i];\n          if (link.rel.match(/^stylesheet$/i) && !link.__LiveReload_pendingRemoval) {\n            _results.push(link);\n          }\n        }\n        return _results;\n      }).call(this);\n      imported = [];\n      _ref = this.document.getElementsByTagName('style');\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        style = _ref[_i];\n        if (style.sheet) {\n          this.collectImportedStylesheets(style, style.sheet, imported);\n        }\n      }\n      for (_j = 0, _len1 = links.length; _j < _len1; _j++) {\n        link = links[_j];\n        this.collectImportedStylesheets(link, link.sheet, imported);\n      }\n      if (this.window.StyleFix && this.document.querySelectorAll) {\n        _ref1 = this.document.querySelectorAll('style[data-href]');\n        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {\n          style = _ref1[_k];\n          links.push(style);\n        }\n      }\n      this.console.log(\"LiveReload found \" + links.length + \" LINKed stylesheets, \" + imported.length + \" @imported stylesheets\");\n      match = pickBestMatch(path, links.concat(imported), (function(_this) {\n        return function(l) {\n          return pathFromUrl(_this.linkHref(l));\n        };\n      })(this));\n      if (match) {\n        if (match.object.rule) {\n          this.console.log(\"LiveReload is reloading imported stylesheet: \" + match.object.href);\n          this.reattachImportedRule(match.object);\n        } else {\n          this.console.log(\"LiveReload is reloading stylesheet: \" + (this.linkHref(match.object)));\n          this.reattachStylesheetLink(match.object);\n        }\n      } else {\n        if (this.options.reloadMissingCSS) {\n          this.console.log(\"LiveReload will reload all stylesheets because path '\" + path + \"' did not match any specific one. To disable this behavior, set 'options.reloadMissingCSS' to 'false'.\");\n          for (_l = 0, _len3 = links.length; _l < _len3; _l++) {\n            link = links[_l];\n            this.reattachStylesheetLink(link);\n          }\n        } else {\n          this.console.log(\"LiveReload will not reload path '\" + path + \"' because the stylesheet was not found on the page and 'options.reloadMissingCSS' was set to 'false'.\");\n        }\n      }\n      return true;\n    };\n\n    Reloader.prototype.collectImportedStylesheets = function(link, styleSheet, result) {\n      var e, index, rule, rules, _i, _len;\n      try {\n        rules = styleSheet != null ? styleSheet.cssRules : void 0;\n      } catch (_error) {\n        e = _error;\n      }\n      if (rules && rules.length) {\n        for (index = _i = 0, _len = rules.length; _i < _len; index = ++_i) {\n          rule = rules[index];\n          switch (rule.type) {\n            case CSSRule.CHARSET_RULE:\n              continue;\n            case CSSRule.IMPORT_RULE:\n              result.push({\n                link: link,\n                rule: rule,\n                index: index,\n                href: rule.href\n              });\n              this.collectImportedStylesheets(link, rule.styleSheet, result);\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    };\n\n    Reloader.prototype.waitUntilCssLoads = function(clone, func) {\n      var callbackExecuted, executeCallback, poll;\n      callbackExecuted = false;\n      executeCallback = (function(_this) {\n        return function() {\n          if (callbackExecuted) {\n            return;\n          }\n          callbackExecuted = true;\n          return func();\n        };\n      })(this);\n      clone.onload = (function(_this) {\n        return function() {\n          _this.console.log(\"LiveReload: the new stylesheet has finished loading\");\n          _this.knownToSupportCssOnLoad = true;\n          return executeCallback();\n        };\n      })(this);\n      if (!this.knownToSupportCssOnLoad) {\n        (poll = (function(_this) {\n          return function() {\n            if (clone.sheet) {\n              _this.console.log(\"LiveReload is polling until the new CSS finishes loading...\");\n              return executeCallback();\n            } else {\n              return _this.Timer.start(50, poll);\n            }\n          };\n        })(this))();\n      }\n      return this.Timer.start(this.options.stylesheetReloadTimeout, executeCallback);\n    };\n\n    Reloader.prototype.linkHref = function(link) {\n      return link.href || link.getAttribute('data-href');\n    };\n\n    Reloader.prototype.reattachStylesheetLink = function(link) {\n      var clone, parent;\n      if (link.__LiveReload_pendingRemoval) {\n        return;\n      }\n      link.__LiveReload_pendingRemoval = true;\n      if (link.tagName === 'STYLE') {\n        clone = this.document.createElement('link');\n        clone.rel = 'stylesheet';\n        clone.media = link.media;\n        clone.disabled = link.disabled;\n      } else {\n        clone = link.cloneNode(false);\n      }\n      clone.href = this.generateCacheBustUrl(this.linkHref(link));\n      parent = link.parentNode;\n      if (parent.lastChild === link) {\n        parent.appendChild(clone);\n      } else {\n        parent.insertBefore(clone, link.nextSibling);\n      }\n      return this.waitUntilCssLoads(clone, (function(_this) {\n        return function() {\n          var additionalWaitingTime;\n          if (/AppleWebKit/.test(navigator.userAgent)) {\n            additionalWaitingTime = 5;\n          } else {\n            additionalWaitingTime = 200;\n          }\n          return _this.Timer.start(additionalWaitingTime, function() {\n            var _ref;\n            if (!link.parentNode) {\n              return;\n            }\n            link.parentNode.removeChild(link);\n            clone.onreadystatechange = null;\n            return (_ref = _this.window.StyleFix) != null ? _ref.link(clone) : void 0;\n          });\n        };\n      })(this));\n    };\n\n    Reloader.prototype.reattachImportedRule = function(_arg) {\n      var href, index, link, media, newRule, parent, rule, tempLink;\n      rule = _arg.rule, index = _arg.index, link = _arg.link;\n      parent = rule.parentStyleSheet;\n      href = this.generateCacheBustUrl(rule.href);\n      media = rule.media.length ? [].join.call(rule.media, ', ') : '';\n      newRule = \"@import url(\\\"\" + href + \"\\\") \" + media + \";\";\n      rule.__LiveReload_newHref = href;\n      tempLink = this.document.createElement(\"link\");\n      tempLink.rel = 'stylesheet';\n      tempLink.href = href;\n      tempLink.__LiveReload_pendingRemoval = true;\n      if (link.parentNode) {\n        link.parentNode.insertBefore(tempLink, link);\n      }\n      return this.Timer.start(this.importCacheWaitPeriod, (function(_this) {\n        return function() {\n          if (tempLink.parentNode) {\n            tempLink.parentNode.removeChild(tempLink);\n          }\n          if (rule.__LiveReload_newHref !== href) {\n            return;\n          }\n          parent.insertRule(newRule, index);\n          parent.deleteRule(index + 1);\n          rule = parent.cssRules[index];\n          rule.__LiveReload_newHref = href;\n          return _this.Timer.start(_this.importCacheWaitPeriod, function() {\n            if (rule.__LiveReload_newHref !== href) {\n              return;\n            }\n            parent.insertRule(newRule, index);\n            return parent.deleteRule(index + 1);\n          });\n        };\n      })(this));\n    };\n\n    Reloader.prototype.generateUniqueString = function() {\n      return 'livereload=' + Date.now();\n    };\n\n    Reloader.prototype.generateCacheBustUrl = function(url, expando) {\n      var hash, oldParams, originalUrl, params, _ref;\n      if (expando == null) {\n        expando = this.generateUniqueString();\n      }\n      _ref = splitUrl(url), url = _ref.url, hash = _ref.hash, oldParams = _ref.params;\n      if (this.options.overrideURL) {\n        if (url.indexOf(this.options.serverURL) < 0) {\n          originalUrl = url;\n          url = this.options.serverURL + this.options.overrideURL + \"?url=\" + encodeURIComponent(url);\n          this.console.log(\"LiveReload is overriding source URL \" + originalUrl + \" with \" + url);\n        }\n      }\n      params = oldParams.replace(/(\\?|&)livereload=(\\d+)/, function(match, sep) {\n        return \"\" + sep + expando;\n      });\n      if (params === oldParams) {\n        if (oldParams.length === 0) {\n          params = \"?\" + expando;\n        } else {\n          params = \"\" + oldParams + \"&\" + expando;\n        }\n      }\n      return url + params + hash;\n    };\n\n    return Reloader;\n\n  })();\n\n}).call(this);\n\n},{}],8:[function(require,module,exports){\n(function() {\n  var CustomEvents, LiveReload, k;\n\n  CustomEvents = require('./customevents');\n\n  LiveReload = window.LiveReload = new (require('./livereload').LiveReload)(window);\n\n  for (k in window) {\n    if (k.match(/^LiveReloadPlugin/)) {\n      LiveReload.addPlugin(window[k]);\n    }\n  }\n\n  LiveReload.addPlugin(require('./less'));\n\n  LiveReload.on('shutdown', function() {\n    return delete window.LiveReload;\n  });\n\n  LiveReload.on('connect', function() {\n    return CustomEvents.fire(document, 'LiveReloadConnect');\n  });\n\n  LiveReload.on('disconnect', function() {\n    return CustomEvents.fire(document, 'LiveReloadDisconnect');\n  });\n\n  CustomEvents.bind(document, 'LiveReloadShutDown', function() {\n    return LiveReload.shutDown();\n  });\n\n}).call(this);\n\n},{\"./customevents\":2,\"./less\":3,\"./livereload\":4}],9:[function(require,module,exports){\n(function() {\n  var Timer;\n\n  exports.Timer = Timer = (function() {\n    function Timer(func) {\n      this.func = func;\n      this.running = false;\n      this.id = null;\n      this._handler = (function(_this) {\n        return function() {\n          _this.running = false;\n          _this.id = null;\n          return _this.func();\n        };\n      })(this);\n    }\n\n    Timer.prototype.start = function(timeout) {\n      if (this.running) {\n        clearTimeout(this.id);\n      }\n      this.id = setTimeout(this._handler, timeout);\n      return this.running = true;\n    };\n\n    Timer.prototype.stop = function() {\n      if (this.running) {\n        clearTimeout(this.id);\n        this.running = false;\n        return this.id = null;\n      }\n    };\n\n    return Timer;\n\n  })();\n\n  Timer.start = function(timeout, func) {\n    return setTimeout(func, timeout);\n  };\n\n}).call(this);\n\n},{}]},{},[8]);\n"
          },
          "redirectURL": "",
          "headersSize": 146,
          "bodySize": 39133,
          "_transferSize": 39279
        },
        "cache": {},
        "timings": {
          "blocked": 2.174876000001881,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.05699999999999994,
          "wait": 76.26300000122842,
          "receive": 2.5270000005548354,
          "_blocked_queueing": 0.8760000018810388
        },
        "serverIPAddress": "[::1]",
        "connection": "142397",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2018-08-01T00:25:09.266Z",
        "time": 9.551493999191734,
        "request": {
          "method": "GET",
          "url": "http://localhost:1234/api/profile.json",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "localhost:1234"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.75 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Referer",
              "value": "http://localhost:1234/"
            },
            {
              "name": "Cookie",
              "value": "_ga=GA1.1.829006498.1522709868; visit=\"v=1&G\""
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "_ga",
              "value": "GA1.1.829006498.1522709868",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "visit",
              "value": "\"v=1&G\"",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 425,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "date",
              "value": "Wed, 01 Aug 2018 00:25:09 GMT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "WEBrick/1.3.1 (Ruby/2.3.3/2016-11-21)"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            },
            {
              "name": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "Cache-Control",
              "value": "private, max-age=0, must-revalidate"
            },
            {
              "name": "connection",
              "value": "close"
            },
            {
              "name": "content-length",
              "value": "42"
            }
          ],
          "cookies": [],
          "content": {
            "size": 42,
            "mimeType": "application/json",
            "compression": -1,
            "text": "{\"data\":\"Hello 2018-07-31 20:25:09 -0400\"}"
          },
          "redirectURL": "",
          "headersSize": 305,
          "bodySize": 43,
          "_transferSize": 348
        },
        "cache": {},
        "timings": {
          "blocked": 0.8134939999998896,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.039000000000000035,
          "wait": 7.395000001574633,
          "receive": 1.3039999976172112,
          "_blocked_queueing": 0.4939999998896383
        },
        "serverIPAddress": "[::1]",
        "connection": "142391",
        "pageref": "page_1"
      }
    ]
  }
}